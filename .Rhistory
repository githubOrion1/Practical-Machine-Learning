fit2
fit2<-lm(mpg~wt,data=mtcars)
summary(fit2)
predict(fit2,newdata=nxd)
nxd<-data.frame(wt=nxd)
nxd
predict(fit2,newdata=nxd)
help(mtcars)
nxd<-data.frame(wt=3.0)
predict(fit2,newdata=nxd)
fit3<-lm(mpg~wt-1,data=mtcars)
fit3
sum(residuals(fit2)^2)
sum(residuals(fit3)^2)
sum(residuals(fit2)^2)/sum(residuals(fit3)^2)
residuals(fit2)
resdiduals(fit3)
residuals(fit3)
summary(fit3)
sum(residuals(fit3))
sum(residuals(fit2))
data(mtcars)
head(mtcars)
fit1<-lm(mpg~cyl+wt)
fit1<-lm(mpg~cyl+wt,data=mtcars)
summary(fit1)
summary(mtcars)
mtcars$cyl<-as.factor(mtcars$cyl)
summary(mtcars$cyl)
fit1<-lm(mpg~cyl+wt,data=mtcars)
summary(fit1)
fit2<-lm(mpg~cyl,data=mtcars)
summary(fit2)
fit3<-lm(mpg~cyl*wt,data=mtcars)
summary(fit3)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu<-mean(x)
mu
sum(w*(x-mu)^2)
mu<-.1471
sum(w*(x-mu)^2)
mean(x*w)
mu<-1.077
sum(w*(x-mu)^2)
mu<-.3
sum(w*(x-mu)^2)
w*(x-mu)^2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit1<-lm(y~x-1)
fit1
data(mtcars)
head(mtcars)
fit2<-lm(mpg~wt,data=mtcars)
fit2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x2<-(x-mean(x))/var(x)
x2
x-mean(x)
var(x)
var(x-mean(x))
x2<-(x-mean(x))/var(x)
var(x2)
x2<-(x-mean(x))/sd(x)
var(x2)
x2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit3<-lm(y~x)
fit3
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.4       2)y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49,       0.05)
x
y
fit3<-lm(y~x)
summary(fit3)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit1<-lm(y~x)
summary(fit1)
data(mtcars)
?I
?mtcars
fit4<-lm(mpg~I(wt*0.5)+factor(cyl),data=mtcars)
summary(fit4)
I(wt*0.5)
mtcars$wt
I(mtcars$wt*0.5)
?I
fit5<-lm(wt~factor(cyl),data=mtcars)
summary(fit5)
fit5<-lm(mpg~wt+factor(cyl),data=mtcars)
summary(fit5)
?mtcars
data(mtcars)
qplot(mtcars$mpg,mtcars$am)
library(ggplot2)
qplot(mtcars$mpg,mtcars$am)
qplot(mtcars$am,mtcars$mpg)
hist(mtcars$mpg)
boxplot(mtcars$mpg~factor(mtcars$am))
?paris
?pairs
pairs(mtcars)
?help
?mtcars
fit1<-lm(mpg~am,data=mtcars)
summary(fit1)
fitSM<-lm(mpg~>.,data=mtcars)
fitSM<-lm(mpg~.,data=mtcars)
summary(fitSM)
step(fitSM)
fitStep<-step(fitSM)
summary(fitStep)
head(mtcars)
qplot(mtcars$qsec,mtcars$mpg)
qplot(mtcars$wt,mtcars$mpg)
plot(mtcars$wt,mtcars$mpg,color=mtcars$am)
grid()
with(mtcars,plot(wt,mpg))
warnings()
dev.off()
with(mtcars,plot(wt,mpg))
grid()
with(mtcars,coplot(mpg~wt|am))
with(mtcars,coplot(mpg~wt|factor(am))
)
with(mtcars,coplot(mpg~wt|qsec)
)
with(mtcars,coplot(mpg~wt|qsec,factor(am)))
with(mtcars,coplot(mpg~wt|qsec*factor(am)))
with(mtcars,coplot(mpg~wt|qsec))
with(mtcars,coplot(mpg~wt|factor(am)))
library(pdflatex)
library(pandoc)
install.packages(c("BH", "boot", "class", "cluster", "codetools", "curl", "data.table", "digest", "dplyr", "foreign", "ggplot2", "htmltools", "jsonlite", "KernSmooth", "knitr", "lattice", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "Rcpp", "rJava", "rmarkdown", "rpart", "spatial", "stringi", "survival", "testthat"))
install.packages("panic")
install.packages("knitr")
?boxplot
?mtcars
fit1<-lm(mpg~am,data=mtcars)
summary(fit1)
fit1<-lm(mpg~factor(am),data=mtcars)
summary(fit1)
fit2<-lm(mpg~factor(am)+wt+qsec)
fit2<-lm(mpg~factor(am)+wt+qsec,data=mtcars)
summary(fit2)
fit3<-step(lm(mpg~.,data=mtcars))
summary(fit3)
plot(disp,mpg,data-mtcars)
plot(disp,mpg,data=mtcars)
plot(mtcars$disp,mtcars$mpg)
plot(mtcars$hp,mtcars$mpg)
?vif
plot(mtcars$cyl,mtcars$mpg)
plot(mtcars$drat,mtcars$mpg)
plot(mtcars$qsec,mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$gear,mtcars$mpg)
plot(mtcars$carb,mtcars$mpg)
?step
fitSM<-lm(mpg~.,data=mtcars)
summary(fitSM)
plot(fitSM$residuals)
qqplot(fitSM$residuals)
plot(x=fitSM$residuals,y=fitSM$fitted.values)
plot(y=fitSM$residuals,x=fitSM$fitted.values)
?qqnorm
qqnorm(y=fitSM$residuals)
?qqnorm
qqline(y=fitSM$residuals)
qqline(residuals(fitSM))
qqline(residuals(fitSM))
plot(x=fitted(fitSM),y=residuals(fitSM))
?mtcars
with(mtcars,plot(disp,mpg))
with(mtcars,plot(cyl,mpg))
with(mtcars,plot(hp,mpg))
with(mtcars,plot(wt,mpg))
with(mtcars,plot(wt,mpg))
with(mtcars,plot(hp,mpg))
with(mtcars,plot(qsec,mpg))
head(mtcars)
with(mtcars,plot(drat,mpg))
with(mtcars,plot(factor(vs),mpg))
with(mtcars,plot(factor(gear),mpg))
with(mtcars,plot(factor(carb),mpg))
with(mtcars,coplot(mpg~hp|factor(am)))
with(mtcars,coplot(mpg~disp|factor(am)))
with(mtcars,coplot(mpg~wt|factor(am)))
with(mtcars,coplot(mpg~qsec|factor(am)))
with(mtcars,coplot(mpg~factor(cyl)|factor(am)))
with(mtcars,coplot(mpg~factor(carb)|factor(am)))
with(mtcars,coplot(mpg~factor(vs)|factor(am)))
with(mtcars,coplot(mpg~factor(gear)|factor(am)))
with(mtcars,coplot(mpg~drat|factor(am)))
with(mtcars,coplot(mpg~qsec|factor(am)))
fit1<-lm(mpg~am,data=mtcars)
fit2<-lm(mpg~am+wt,data=mtcars)
fit3<-lm(mpg~am+wt+qsec,data=mtcars)
fit4<-lm(mpg~.,data=mtcars)
anova(fit1,fit2,fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+hp)
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+factor(cyl))
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+disp)
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+drat)
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+vs)
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+factor(gear))
anova(fit3,fit4)
fit4<-update(fit3,mpg~factor(am)+wt+qsec+factor(carb))
anova(fit3,fit4)
summary(fit3)
?influence.measures
library(car)
install.packages("car")
library(car)
vif(fit3)
plot(fit3)
plot(fit3)
hist(residuals(fit3))
plot(residuals(fit3),fitted(fit3))
plot(y=residuals(fit3),x=fitted(fit3))
plot(y=mtcars$mpg,x=residuals(fit3))
?influence.measures
hatvalues(fit3)
nrow(mtcars)
6/nrow(mtcars)
dfbetasPlots(fit3)
dfbetas(fit3)
dffits(fit3)
dfbetas(fit3)
?mtcars
dffits(fit3)
names(fit3)
fit3$fitted.values
mtcars$mpg
rownames(mtcars)
mtcars["Chrysler Imperial",mpg]
mtcars["Chrysler Imperial","mpg"]
hat.values(fit3)
hatvalues(fit3)
dffits(fit3)
dfbetas(fit3)
plot(fit3)
dffits(fit3)
dfbetas(fit3)
hatvalues(fit3)
summary(fit3)
fit3$coefficients[2]
summary(fit3)
names(fit3)
fit3$df.residual
fit3$effects
fit3$terms
summary(fit3)
fit3$rank
fit3$coefficients
f3Sum<-summary(fit3)
f3Sum$coefficients[,2]
f3Sum$coefficients
f3Sum[2,2]
f3Sum$coefficients[2,2]
?TDist
qt(0.975,df=fit3$df.residual)
qt(0.025,df=fit3$df.residual)
f3Sum$coefficients[2,1]
library(xlsx)
?read.xlsx
con<-url("http://biostat.jhsph.edu/~jtleek/contact.html")
htmlCode<-readlines(con)
htmlCode<-readLines(con)
htmlCode<-readLines(con)
con<-url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode<-readLines(con)
summary(htmlCode)
htmlCode[10]
nchar(htmlCode[10])
htmlLines<-c(10,20,30,100)
close(con)
for(hl in htmlLines){}
for(hl in htmlLines){}
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
ls()
rm(list=ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
nrow(training)
nrow(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
head(training)
head(testing)
nrow(training)
nrow(testing)
rm(list=ls())
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(as.integer(rownames(x)),training$CompressiveStrength)
plot(as.integer(rownames(training)),training$CompressiveStrength)
install.packages("Hmisc")
?cut
str(concrete)
plot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(BlasFuranceSlag))
plot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(BlastFuranceSlag))
plot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$BlastFurnanceSlag))
plot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$BlastFurnaceSlag))
?cut
plot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$BlastFurnaceSlag,breaks=5))
library(ggplot2)
warnings()
qplot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$BlastFurnaceSlag,breaks=5))
qplot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$BlastFurnaceSlag,breaks=3))
qplot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$FlyAsh,breaks=3))
qplot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$FlyWater,breaks=3))
qplot(as.integer(rownames(training)),training$CompressiveStrength,color=cut(training$Water,breaks=3))
hist(training$Superplasticizer)
rm(list=ls())
cls()
clear()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
head(segmentationOriginal)
trainset<-subset(segmentationOriginal,Case=="Train")
model_fit <- train(Class~.,data=trainset, method="rpart")
install.packages("e1071")
library(e1071)
model_fit <- train(Class~.,data=trainset, method="rpart")
summary(model_fit)
predict(model_fit,TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
plot(model_fit)
install.packages("rattle")
plot(model_fit, uniform=TRUE)
plot(model_fit$finalModel, uniform=TRUE)
text(model_fit$FinalModel, use.n=TRUE, all=TRUE, cex=.8)
text(model_fit$FinalModel, use.n=TRUE, all=TRUE)
text(model_fit$FinalModel, use.n=TRUE)
text(model_fit$FinalModel)
text(model_fit$FinalModel, all=TRUE)
text(model_fit$FinalModel, use.n=TRUE, all=TRUE, cex=0.8)
?text
text(model_fit$FinalModel)
plot(model_fit$finalModel, uniform=TRUE, main="Tree")
text(model_fit$FinalModel, use.n=TRUE, all=TRUE, cex=.8)
predict(model_fit,TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
print(model_fit$finalModel)
install.packages(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
oo_model_fit <- train(Area~.,data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(oo_model_fit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
names(trainSA)
chd_model_fit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
chd_model_fit <- train(trainSA, chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
chd_model_fit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
class(trainSA$chd)
chd_model_fit <- train(factor(chd) ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(chd_model_fit))
chd_model_fit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass(trainSA$chd, predict(chd_model_fit))
missClass(testSA$chd, predict(chd_model_fit,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
v_model_fit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
?varImp
varImp(v_model_fit)
seed
set.seed(33833)
v_model_fit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(v_model_fit)
setwd("~/Documents/DataScience/PML")
source('~/Documents/DataScience/PML/svm.R', echo=TRUE)
source('~/Documents/DataScience/PML/rf.R', echo=TRUE)
rm(list=ls())
source('~/Documents/DataScience/PML/gbm.R', echo=TRUE)
source('~/Documents/DataScience/PML/rpart.R', echo=TRUE)
source('~/Documents/DataScience/PML/rpart.R', echo=TRUE)
names(rpart_fit)
rpart_fit$results
rpart_fit$maximize
rpart_fit$resamplesCM
rpart_fit$resampledCM
rpart_fit$finalModel
plot(rpart_fit$finalModel)
setwd("~/Documents/DataScience/PML/Project")
rm(list=ls())
library(curl)
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile="train.csv", method="curl")
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile="test.csv", method="curl")
ham <- read.csv("train.csv")
library(dplyr)
library(caret)
ham <- select(ham,-c(1:7,12:36,50:59,69:83,87:101,103:112,125:139,141:150))
ham <- ham[complete.cases(ham),]
source('~/Documents/DataScience/PML/Project/rpart.R', echo=TRUE)
confusionMatrix(rpart_fit)
25.9+7.1+8.4+8.3
?confusionMatrix
?confusionMatrix
names(confusionMatrix(rpart_fit))
confusionMatrix(rpart_fit)$table
diag(confusionMatrix(rpart_fit)$table)
sum(diag(confusionMatrix(rpart_fit)$table))
pred_classe <- predict(rpart_fit, newdata=test_set)
confusionMatrix(pred_classe, test_set$classe)
names(rpart_fit)
head(rpart_fit$results)
head(rpart_fit$pred)
confusionMatrix(predict(rpart_fit),train_set$classe)
pred_classe <- predict(rpart_fit, newdata=test_set)
confusionMatrix(pred_classe, test_set$classe)
rpart_fit
rm(list=ls())
source('~/Documents/DataScience/PML/Project/rf.R', echo=TRUE)
ham_test <- select(ham_test,-c(1:7,12:36,50:59,69:83,87:101,103:112,125:139,141:150))
ham_test <- ham[complete.cases(ham_test),]
predict(rf_fit, newdata=ham_test)
for (i in 1:20){}
prf <- predict(rf_fit, newdata=ham_test)
for (i in 1:20){print(i,prf)}
for (i in 1:20){print(i,prf[i])}
prf
for (i in 1:20){print(i,prf[i])}
for (i in 1:20){print(i); print(prf[i])}
plot(rpart_fit)
rm(list=ls())
source('~/Documents/DataScience/PML/Project/rpart.R', echo=TRUE)
plot(rpart_fit)
plot(rpart_fit$finalModel)
plot(rpart_fit$finalModel, uniform=FALSE, branch=1, compress=FALSE, nspace, margin=0, minbranch=0.3,... )
plot(rpart_fit$finalModel, uniform=FALSE, branch=1, compress=FALSE, nspace, margin=0, minbranch=0.3)
text(rpart_fit$finalModel,all=TRUE)
plot(rpart_fit$finalModel, uniform=TRUE, compress=TRUE, lty=3, branch=0.7)
text(rpart_fit$finalModel, all=TRUE, digits=7, use.n=TRUE, cex=0.4, xpd=TRUE)
plot(rpart_fit$finalModel, uniform=TRUE, compress=TRUE, lty=3, branch=0.7)
text(rpart_fit$finalModel, all=TRUE, digits=7, cex=0.4, xpd=TRUE)
length(test_set$classe)/nrow(test_set)
sum(test_set$classe=='A')/nrow(test_set)
table(test_set$classe)
length(test_set)
table(train_set)
table(train_set$classe)
rm(list=ls())
setwd("~/Documents/DataScience/PML/Project/Practical-Machine-Learning")
